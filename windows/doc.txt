<div id='a1'> <h1>Router 构造配置</h1> </div> <div id='a2'> <h2>routes</h2> </div> <h3>类型: Array<RouteConfig></h3> <p>RouteConfig 的类型定义：</p> <pre><div class="hljs"><code class="lang-js">declare type RouteConfig = {<br> <span class="hljs-attr">path</span>: string;<br> component?: Component;<br> name?: string; <span class="hljs-comment">// 命名路由<br></span> components?: { [name: string]: Component }; <span class="hljs-comment">// 命名视图组件<br></span> redirect?: string | Location | <span class="hljs-built_in">Function<br></span>; props?: boolean | string | <span class="hljs-built_in">Function<br></span>; alias?: string | <span class="hljs-built_in">Array</span>&lt;string&gt;<br>; children?: <span class="hljs-built_in">Array</span>&lt;RouteConfig&gt;; <span class="hljs-comment">// 嵌套路由<br></span> beforeEnter?: <span class="hljs-function">(<span class="hljs-params">to: Route, <span class="hljs-keyword">from</span>: Route, next: <span class="hljs-built_in">Function</span></span>) =&gt;</span> <span class="hljs-keyword">void</span>;<br> meta?: any;<br><br><br> <span class="hljs-comment">// 2.6.0+</span> caseSensitive?: boolean; <span class="hljs-comment">// 匹配规则是否大小写敏感？(默认值：false)</span><br> pathToRegexpOptions?: <span class="hljs-built_in">Object</span>; <span class="hljs-comment">// 编译正则的选项</span> } </code></div></pre> <div id='a3'> <h2>mode</h2> </div> <h3>类型:string</h3> <h3>默认值:“hash”(浏览器环境) | “abstract” (Node.js 环境)</h3> <h3>可选值: “hash” | “history” | “abstract”</h3> <p>配置路由模式:</p> <p>hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器。</p> <p>history: 依赖 HTML5 History API 和服务器配置。查看 HTML5 History 模式。</p> <p>abstract: 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式。</p> <div id='a4'> <h1>对组件注入</h1> </div> <div id='a5'> <h2>注入的属性</h2> </div> <p>通过在 Vue 根实例的 router 配置传入 router 实例，下面这些属性成员会被注入到每个子组件。</p> <h3>$router</h3> <p>router 实例。</p> <h3>$route</h3> <p>当前激活的路由信息对象。这个属性是只读的，里面的属性是 immutable（不可变） 的，不过你可以 watch（监测变化）它。</p> <div id='a6'> <h2>允许的额外配置</h2> </div> <div><h3>beforeRouteEnter</h3> <h3>beforeRouteUpdate (在 2.2 加入)</h3> <h3>beforeRouteLeave</h3> <p>查看组件内的守卫。</p> </div>